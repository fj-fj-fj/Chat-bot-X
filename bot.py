import re
import sys

from utils import time_input


pattern = r'((?!\n)\s+)'

BOT_PHRASES = {
    "hello":

            re.sub(pattern, ' ', """{},  –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∫–æ–º–ø–∞–Ω–∏—è X, –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –æ–ø—Ä–æ—Å 
            —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞–º —É–¥–æ–±–Ω–æ —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç—å?"""),

    "hello_repeat":

            "–≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è X  –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞–º —É–¥–æ–±–Ω–æ —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç—å?",

    "hello_null":

            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ —Å–ª—ã—à–Ω–æ. –í—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",

    "hangup_positive":

            "–û—Ç–ª–∏—á–Ω–æ! –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –í—Å–µ–≥–æ –≤–∞–º –¥–æ–±—Ä–æ–≥–æ!",
            
    "hangup_negative":

            "–Ø –≤–∞—Å –ø–æ–Ω—è–ª. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –í—Å–µ–≥–æ –≤–∞–º –¥–æ–±—Ä–æ–≥–æ.",

    "hangup_wrong_time":

            "–ò–∑–≤–∏–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. –í—Å–µ–≥–æ –≤–∞–º –¥–æ–±—Ä–æ–≥–æ",

    "hangup_null":

            "–í–∞—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ —Å–ª—ã—à–Ω–æ, –±—É–¥–µ—Ç –ª—É—á—à–µ –µ—Å–ª–∏ —è –ø–µ—Ä–µ–∑–≤–æ–Ω—é. –í—Å–µ–≥–æ –≤–∞–º –¥–æ–±—Ä–æ–≥–æ",

    "forward": 

            "–ß—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ, —è –ø–µ—Ä–µ–∫–ª—é—á—É –∑–≤–æ–Ω–æ–∫ –Ω–∞ –º–æ–∏—Ö –∫–æ–ª–ª–µ–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ª–∏–Ω–∏–∏.  ‚ô´‚Ä¢*¬®*‚Ä¢.¬∏¬∏‚ô™",

    "recommend_main":

            re.sub(pattern, ' ', """–°–∫–∞–∂–∏—Ç–µ, –∞ –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º? –û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, 
            –ø–æ —à–∫–∞–ª–µ –æ—Ç ¬´0¬ª –¥–æ ¬´10¬ª, –≥–¥–µ ¬´0¬ª - –Ω–µ –±—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å, ¬´10¬ª - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é."""),

    "recommend_repeat":

            re.sub(pattern, ' ', """–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10, 
            –≥–¥–µ 0 - —Ç–æ—á–Ω–æ –Ω–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é, 10 - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é?"""),

    "recommend_repeat_2":

            re.sub(pattern, ' ', """–ù—É –µ—Å–ª–∏ –±—ã –≤–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –¥—Ä—É–∑—å—è–º –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–º, 
            –≤—ã –±—ã —Å—Ç–∞–ª–∏ —ç—Ç–æ –¥–µ–ª–∞—Ç—å? –ï—Å–ª–∏ ¬´–¥–∞¬ª - —Ç–æ –æ—Ü–µ–Ω–∫–∞ ¬´10¬ª, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –Ω–µ—Ç ‚Äì ¬´0¬ª"""),

    "recommend_score_negative":

            "–ù—É –∞ –æ—Ç 0 –¥–æ 10 –∫–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –±—ã: 0, 5, –∏–ª–∏ –º–æ–∂–µ—Ç, 7 ?",

    "recommend_score_neutral":

            "–ù—É –∞ –æ—Ç 0 –¥–æ 10 –∫–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ ?",

    "recommend_score_positive":

            "–•–æ—Ä–æ—à–æ, –∞ –ø–æ 10-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∫–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ 8-9 –∏–ª–∏ –º–æ–∂–µ—Ç 10?",

    "recommend_null":

            "–ò–∑–≤–∏–Ω–∏—Ç–µ –≤–∞—Å —Å–≤–æ—Å–µ–º –Ω–µ —Å–ª—ã—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",

    "recommend_default": 

            "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"

}

goto = {
    'null': {
        'hello_null': BOT_PHRASES.get('hello_null'),
        'recommend_nul': BOT_PHRASES.get('recommend_null'), 
        'hangup_null': BOT_PHRASES.get('hangup_null')
    },
    '–¥–∞': {
        'recommend_main': BOT_PHRASES.get('recommend_main'),
        'recommend_score_positive': BOT_PHRASES.get('recommend_score_positive')
    },
    '–Ω–µ—Ç': {
        'hangup_wrong_time': BOT_PHRASES.get('hangup_wrong_time'),
        'recommend_score_negative': BOT_PHRASES.get('recommend_score_negative')
    },
    '–∑–∞–Ω—è—Ç': BOT_PHRASES.get('hangup_wrong_time'),
    '–Ω–µ –∑–Ω–∞—é': BOT_PHRASES.get('recommend_repeat_2'),
    '–≤–æ–∑–º–æ–∂–Ω–æ': BOT_PHRASES.get('recommend_score_neutral'),
    '–µ—â–µ —Ä–∞–∑': {
        'hello_repeat': BOT_PHRASES.get('hello_repeat'), 
        'recommend_repeat': BOT_PHRASES.get('recommend_repeat')
    },
    '?': BOT_PHRASES.get('forward'),
    'bad': BOT_PHRASES.get('hangup_negative'),
    'good': BOT_PHRASES.get('hangup_positive'),
    'exit': [
        'hangup_null', 'hangup_positive',
        'hangup_negative','–∑–∞–Ω—è—Ç',
    ]
}
# in: hey? out: [CROWLING AND SCREAMING]:
default = BOT_PHRASES.get('recommend_main'), BOT_PHRASES.get('recommend_default')


class Chat:
    """This class contains the logic of communication with the user

            __init__
            :self._hlogic: (bool) True if say_hello, hello_null, hello_repeat
            :self._mlogic: (bool) True for all other logic
            :self._repeated: (bool) ask again a second time or hengup_null run
    """

    def __init__(self):
        self._hlogic = True
        self._mlogic = False
        self._repeated = False


    @staticmethod 
    def clean_data(response):
        return response.lower().strip()


    def say_hello(self, name):
        """<user name>, BOT_PHRASES['hello']"""
        hello = BOT_PHRASES["hello"]
        hello = self.format_text(hello)
        return time_input(hello.format(name))


    def format_text(self, phrase):
        """beep ü§ñ   >>  >>>    <bot phrase>"""
        return f'\n\a\N{Robot Face}\t>>\t>>>\t{phrase}\n\n'


    def check_repeat(self):
        """re-ask or hangup_null"""
        self._repeated = True if not self._repeated else False
        return self._repeated


    def check_pattern(self, response):
        """response in goto.keys()"""
        return any(list(filter(lambda x: x == response, list(goto.keys()))))


    def set_current_logic(self, is_pattern):
        """ :self._hlogic: (bool) True if say_hello, hello_null, hello_repeat
            :self._mlogic: (bool) True for all other logic
        """

        if is_pattern in ('–Ω–µ—Ç', '–∑–∞–Ω—è—Ç', '–µ—â–µ —Ä–∞–∑'): return
        self._hlogic, self._mlogic = self._mlogic, self._hlogic


    def get_current_def–∞lt(self):
        """self._hlogic -> return recommend_main
           self._mlogic -> return recommend_default
        """
        return default[0 if self._hlogic else 1]


    def check_exit(self, response, key='foo'):
        """hangup logic"""
        return any(map(lambda w: w in goto['exit'], (key, response))) 


    def score_on_a_scale_of_1_to_10(self, n):
        """ rate: hangup_negative <- [0..8..10] -> hangup_positive"""
        good = goto.get('good')
        bad = goto.get('bad')

        return bad if int(n) in range(9) else good


    def trying_to_chat(self, response):
        """User is None:
                re-ask if not asked
                exit if it was
        
        """
        re_ask = self.check_repeat()

        if self._hlogic and re_ask:
            phrase = goto['null']['hello_null']
        elif not self._hlogic and re_ask:
            phrase = goto['null']['recommend_nul']
        elif not re_ask:
            phrase = goto['null']['hangup_null']
            raise sys.exit(self.format_text(phrase))
        return time_input(self.format_text(phrase))
    

    def chat_continue(self, response):
        """If user replied: goto: {response: function};
           if rated: exit; if null: re-ask
        
        """
        response = Bot.clean_data(response)
        is_pattern = self.check_pattern(response)

        try:
            if self._hlogic and is_pattern:
                key = list(goto.get(response).keys())[0]
                self.set_current_logic(response)

            elif self._mlogic and (is_pattern or response.isdigit()):
                
                if response.isdigit() and int(response) in range(11):
                        hungup = self.score_on_a_scale_of_1_to_10(response)
                        raise sys.exit(self.format_text(hungup))

                key = list(goto.get(response).keys())[1]

            default = self.get_current_def–∞lt()
            phrase = goto[response].get(key, default)

        except (KeyError, AttributeError):
            default = self.get_current_def–∞lt()
            phrase = goto.get(response, default)

        wrong_time = self.check_exit(response)
        if wrong_time: 
            raise sys.exit(self.format_text(phrase))

        return time_input(self.format_text(phrase))


class Bot(Chat):
    
    def say_hello(self, name):
        return super().say_hello(name.capitalize())


if __name__ == '__main__':
    bot = Bot('Chapa')


# –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ default,
# —Ä–æ–±–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—Å—è –≤ –ø–µ—Ç–ª–µ hello_logic –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å recommend_main

# —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–¥—É—Ç—ã–π event loop